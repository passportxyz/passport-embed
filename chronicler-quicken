#!/bin/bash
set -o pipefail  # Ensure pipe returns claude's exit status, not the while loop's

# Manual chronicler quickening script
# Run this after commits to process gathered knowledge into documentation

if [ ! -f .claude/knowledge/session.md ] || [ ! -s .claude/knowledge/session.md ]; then
  echo "üìú No knowledge to process (session.md is empty or missing)"
  exit 0
fi

echo "üìú Chronicler: Processing session knowledge..."
echo "‚ö†Ô∏è  Note: This may take a few minutes for complex documentation updates"

claude \
--verbose \
--allowedTools Read,Write,MultiEdit,Glob,Grep,LS,Bash,Git \
--append-system-prompt "You are the Chronicler, keeper of project knowledge. You quicken raw gathered knowledge into permanent documentation. CRITICAL: Use MultiEdit for ALL CLAUDE.md updates. Never modify content outside CHRONICLER markers. Organize knowledge by category. Write concise technical documentation. The project structure is: .claude/knowledge/session.md (raw captures), .claude/knowledge/{category}/ (organized knowledge), .claude/knowledge/KNOWLEDGE_MAP.md (index), CLAUDE.md (user-facing docs with CHRONICLER sections)." \
--print --output-format stream-json "You are processing gathered knowledge. Execute this MANDATORY checklist:

1. **MUST READ** .claude/knowledge/session.md - Even if empty
2. **MUST PROCESS** each entry from session.md:
   - Determine category (architecture/patterns/dependencies/workflows/gotchas)
   - **MUST CREATE OR UPDATE** appropriate file in .claude/knowledge/{category}/
   - Keep dated entries only for gotchas
3. **MUST UPDATE OR CREATE** .claude/knowledge/KNOWLEDGE_MAP.md:
   - Add new topics with links to their documentation
   - Organize by category with brief descriptions
   - Include last updated timestamps
4. **MUST UPDATE** CLAUDE.md Chronicler sections:
   - Find sections between <!-- BEGIN CHRONICLER: section-name --> and <!-- END CHRONICLER: section-name -->
   - Update ONLY content between these markers
   - **MUST MAINTAIN ALL** these sections:
     * knowledge-gathering-protocol (always present)
     * project-architecture (from .claude/knowledge/architecture/)
     * key-patterns (from .claude/knowledge/patterns/)
     * dependencies (from .claude/knowledge/dependencies/)
     * development-workflows (from .claude/knowledge/workflows/)
     * recent-discoveries (latest gotchas)
   - **MUST PRESERVE** ALL user content outside Chronicler sections
   - If markers don't exist, append new sections at end
5. **MUST CLEAR** session.md after processing - use Write tool with empty content

**VERIFICATION CHECKLIST - ALL MUST BE TRUE:**
- [ ] Read session.md (even if empty)
- [ ] Created/updated .claude/knowledge/ category files for any new knowledge
- [ ] Created/updated KNOWLEDGE_MAP.md
- [ ] Updated ALL relevant CLAUDE.md Chronicler sections
- [ ] Verified no knowledge was lost in the transfer
- [ ] Cleared session.md by writing empty content to it

**IF YOU SKIP ANY STEP, YOU HAVE FAILED THE TASK**

Documentation structure to create and maintain:
.claude/knowledge/
‚îú‚îÄ‚îÄ session.md           # Current session's raw captures (you must clear this)
‚îú‚îÄ‚îÄ architecture/        # System design, component relationships
‚îú‚îÄ‚îÄ patterns/           # Coding patterns, conventions
‚îú‚îÄ‚îÄ dependencies/       # External services, libraries
‚îú‚îÄ‚îÄ workflows/          # How to do things in this project
‚îú‚îÄ‚îÄ gotchas/           # Surprises, non-obvious behaviors
‚îî‚îÄ‚îÄ KNOWLEDGE_MAP.md   # Index of all knowledge (auto-maintained by you)

After completing all updates, inform the user that documentation has been updated." | \
while IFS= read -r line; do
  # Extract and print text messages
  text=$(echo "$line" | jq -r 'select(.message.content[0].type == "text") | .message.content[0].text' 2>/dev/null)
  if [ -n "$text" ]; then
    echo "$text"
  fi
  
  # Extract and print tool usage
  tool=$(echo "$line" | jq -r 'select(.message.content[0].type == "tool_use") | .message.content[0].name' 2>/dev/null)
  if [ -n "$tool" ]; then
    echo "[Using tool: $tool]"
  fi
done

if [ $? -eq 0 ]; then
  echo "‚úÖ Chronicler: Knowledge processed successfully"
  echo "üìù Committing documentation updates..."
  git add CLAUDE.md .claude/knowledge/
  git commit -m "üìú Update project documentation via Chronicler"
else
  echo "‚ö†Ô∏è  Chronicler: Processing may have been interrupted"
fi
