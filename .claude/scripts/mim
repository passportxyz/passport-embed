#!/bin/bash
set -o pipefail

# M√≠m - Persistent Memory for Claude Code
# Main entry point for all mim commands

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Shared tools configuration for all mim commands
ALLOWED_TOOLS="Read,Write,Edit,MultiEdit,Glob,Grep,LS,Bash,Git"

# Load prompts from JS configuration
PROMPTS_FILE="$SCRIPT_DIR/mim-prompts.js"
if [ ! -f "$PROMPTS_FILE" ]; then
  echo -e "${RED}‚ùå Error: Prompts file not found: $PROMPTS_FILE${NC}"
  exit 1
fi

# Function to get prompt from JS
get_prompt() {
  local key="$1"
  local index="${2:-0}"
  node -e "const prompts = require('$PROMPTS_FILE'); console.log(prompts['$key'][$index] || '')" 2>/dev/null
}

# Function to get prompt array length
get_prompt_count() {
  local key="$1"
  node -e "const prompts = require('$PROMPTS_FILE'); console.log((prompts['$key'] || []).length)" 2>/dev/null || echo 0
}

# Function to ensure inquisitor agent exists
ensure_inquisitor_agent() {
  local agent_file=".claude/agents/inquisitor.md"

  # Agent should already be installed by install.sh
  if [ ! -f "$agent_file" ]; then
    echo -e "${RED}‚ùå Error: Inquisitor agent not found at $agent_file${NC}"
    echo "Please reinstall mim to get the latest agents."
    echo "Run: curl -sSL https://raw.githubusercontent.com/lucianHymer/mim/main/install.sh | sh"
    exit 1
  fi
}

show_help() {
  echo "‚ö° M√≠m - Persistent Memory for Claude Code"
  echo ""
  echo "USAGE:"
  echo "  mim <command> [options]"
  echo ""
  echo "COMMANDS:"
  echo "  coalesce     Process remembered knowledge into documentation"
  echo "  distill      Automatically clean up duplicates and conflicts in documentation"
  echo "               (interactive by default - opens editor for review items)"
  echo ""
  echo "OPTIONS FOR DISTILL:"
  echo "  --no-interactive, -n  Skip editor, preserve current two-step behavior"
  echo "  --editor <cmd>        Override \$EDITOR for this run"
  echo "  --refine-only         Jump straight to refine step"
  echo ""
  echo "EXAMPLES:"
  echo "  mim coalesce              # Process session.md into organized docs"
  echo "  mim distill               # Auto-clean and interactively review (default)"
  echo "  mim distill -n            # Auto-clean only, no interactive editor"
  echo "  mim distill --editor vim  # Use vim for this distill session"
  echo "  mim distill --refine-only # Jump straight to refine step"
  echo ""
}

# Stream claude output, extracting text and tool usage
stream_claude_output() {
  while IFS= read -r line; do
    # Extract and print text messages
    text=$(echo "$line" | jq -r 'select(.message.content[0].type == "text") | .message.content[0].text' 2>/dev/null)
    if [ -n "$text" ]; then
      echo "$text"
    fi
    
    # Extract and print tool usage
    tool=$(echo "$line" | jq -r 'select(.message.content[0].type == "tool_use") | .message.content[0].name' 2>/dev/null)
    if [ -n "$tool" ]; then
      echo "[Using tool: $tool]"
    fi
  done
}


run_coalesce() {
  if [ ! -f .claude/knowledge/session.md ] || [ ! -s .claude/knowledge/session.md ]; then
    echo "üìú No knowledge to process (session.md is empty or missing)"
    exit 0
  fi

  echo "‚öîÔ∏è  ODIN CALLS! M√≠mir's severed head awakens to serve!"
  echo "üî® Fragment by fragment, we forge the eternal codex..."
  echo "üî• By the flames of Muspelheim, knowledge shall be forged anew!"
  echo ""
  echo "   [The ritual takes time, perhaps several minutes]"
  echo ""

  # Get the coalesce prompt from JSON
  local prompt=$(get_prompt "coalesce" 0)
  if [ -z "$prompt" ] || [ "$prompt" = "null" ]; then
    echo -e "${RED}‚ùå Error: Could not load coalesce prompt${NC}"
    exit 1
  fi

  claude \
  --verbose \
  --allowedTools "$ALLOWED_TOOLS" \
  --append-system-prompt "You are Mim, keeper of project knowledge. You coalesce raw remembered knowledge into permanent documentation. CRITICAL PATH STRUCTURE: The instructions file is at .claude/knowledge/INSTRUCTIONS.md (NOT .claude/KNOWLEDGE_INSTRUCTIONS.md). CLAUDE.md contains @ references to .claude/knowledge/INSTRUCTIONS.md and .claude/knowledge/KNOWLEDGE_MAP_CLAUDE.md. You maintain TWO knowledge maps: KNOWLEDGE_MAP.md (user-facing with markdown links) and KNOWLEDGE_MAP_CLAUDE.md (Claude-facing with @ references - these are RELATIVE to the knowledge directory). The project structure: .claude/knowledge/session.md (raw captures), .claude/knowledge/{category}/ (organized knowledge), .claude/knowledge/KNOWLEDGE_MAP.md (human-facing index), .claude/knowledge/KNOWLEDGE_MAP_CLAUDE.md (claude-facing index with RELATIVE @ refs like @patterns/file.md NOT @.claude/knowledge/patterns/file.md)" \
  --print --output-format stream-json "$prompt" | stream_claude_output

  if [ $? -eq 0 ]; then
    echo ""
    echo "‚ö° THE RITUAL IS COMPLETE! The codex has been forged!"
    echo ""
    echo "üìú Sealing the runes in git's eternal halls..."
    git add CLAUDE.md .claude/knowledge/
    git commit -m "üìú Update project documentation via Mim"
    echo ""
    echo "üî• IT IS DONE. M√≠mir returns to slumber."
  else
    echo ""
    echo "üíÄ THE RITUAL FALTERS! M√≠mir's magic was disrupted!"
    echo "‚ö†Ô∏è  The fragments remain unbound... try again, wanderer."
  fi
}

run_distill() {
  # Parse arguments
  local interactive=true
  local custom_editor=""
  
  while [[ $# -gt 0 ]]; do
    case $1 in
      --no-interactive|-n)
        interactive=false
        shift
        ;;
      --editor)
        custom_editor="$2"
        shift 2
        ;;
      --refine-only)
        # Jump directly to refine
        run_distill_refine
        return $?
        ;;
      *)
        echo -e "${RED}‚ùå Unknown option: $1${NC}"
        echo "Use 'mim help' to see available options."
        exit 1
        ;;
    esac
  done

  echo "üßπ Running mim distill..."
  echo "üîç Scanning documentation for duplicates, conflicts, junk, and outdated information..."
  echo ""
  echo "   [This may take several minutes to analyze all documentation]"
  echo ""

  # Ensure inquisitor agent exists
  ensure_inquisitor_agent

  # Run multi-prompt distill generation workflow
  local prompt_count=$(get_prompt_count "distill_generate")
  if [ "$prompt_count" -eq 0 ]; then
    echo -e "${RED}‚ùå Error: No distill_generate prompts found${NC}"
    exit 1
  fi

  local session_id=""
  local exit_code=0

  # First prompt: Launch inquisitor agents
  echo "üîç Phase 1: Launching inquisitor agents..."
  local prompt=$(get_prompt "distill_generate" 0)
  if [ -z "$prompt" ] || [ "$prompt" = "null" ]; then
    echo -e "${RED}‚ùå Error: Could not load distill_generate prompt 0${NC}"
    exit 1
  fi

  # Run first prompt and capture session ID
  local temp_output=$(mktemp)
  claude \
    --verbose \
    --allowedTools "$ALLOWED_TOOLS,Task" \
    --append-system-prompt "You are Mim's distillation orchestrator. You coordinate multiple inquisitor agents to verify and clean the knowledge base. The inquisitor agents are specialized for researching individual knowledge entries." \
    --print --output-format stream-json "$prompt" 2>&1 | tee "$temp_output" | stream_claude_output
  exit_code=${PIPESTATUS[0]}

  # Extract session ID from the output
  session_id=$(grep -o 'Session ID: [a-zA-Z0-9_-]*' "$temp_output" | tail -1 | cut -d' ' -f3)
  rm "$temp_output"

  if [ $exit_code -ne 0 ]; then
    echo -e "${RED}‚ùå Phase 1 failed${NC}"
    return 1
  fi

  # Subsequent prompts: Process with --resume
  for ((i=1; i<prompt_count; i++)); do
    local phase=$((i + 1))
    echo ""
    echo "üîÑ Phase $phase: Processing findings..."

    prompt=$(get_prompt "distill_generate" $i)
    if [ -z "$prompt" ] || [ "$prompt" = "null" ]; then
      echo -e "${RED}‚ùå Error: Could not load distill_generate prompt $i${NC}"
      exit 1
    fi

    # Use --resume flag to continue the same session
    local resume_flag=""
    if [ -n "$session_id" ]; then
      resume_flag="--resume $session_id"
    fi

    claude \
      $resume_flag \
      --verbose \
      --allowedTools "$ALLOWED_TOOLS" \
      --print --output-format stream-json "$prompt" | stream_claude_output
    exit_code=$?

    if [ $exit_code -ne 0 ]; then
      echo -e "${RED}‚ùå Phase $phase failed${NC}"
      return 1
    fi
  done

  if [ $? -eq 0 ]; then
    echo ""
    echo "‚ú® Distillation complete!"
    if [ -f "./distill-report.md" ]; then
      echo ""
      echo "üìã Distill report generated at ./distill-report.md"
      
      # Check if there are review items
      local has_review_items=false
      if grep -q "## Requires Review" "./distill-report.md" && [ "$(grep -A 10 "## Requires Review" "./distill-report.md" | wc -l)" -gt 2 ]; then
        has_review_items=true
      fi
      
      if [ "$has_review_items" = true ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Some issues require human review${NC}"
        
        if [ "$interactive" = true ]; then
          # Interactive mode: open editor
          echo ""
          echo "üìù Opening editor for review items..."
          
          # Determine which editor to use
          local editor_cmd=""
          if [ -n "$custom_editor" ]; then
            editor_cmd="$custom_editor"
          elif [ -n "$EDITOR" ]; then
            editor_cmd="$EDITOR"
          else
            # Try common editors as fallback
            if command -v vi >/dev/null 2>&1; then
              editor_cmd="vi"
            elif command -v nano >/dev/null 2>&1; then
              editor_cmd="nano"
            else
              echo -e "${RED}‚ùå No editor found! Set \$EDITOR or use --editor option${NC}"
              echo "üìù Edit ./distill-report.md manually, then run:"
              echo -e "${BLUE}   mim distill refine${NC}"
              exit 1
            fi
          fi
          
          echo "Using editor: $editor_cmd"
          echo ""
          
          # Open the editor and wait for it to close
          if $editor_cmd "./distill-report.md"; then
            echo ""
            echo "‚úÖ Editor closed successfully"
            echo "üéØ Applying refinements..."
            echo ""
            # Run refinement automatically
            run_distill_refine
          else
            echo ""
            echo -e "${YELLOW}‚ö†Ô∏è  Editor exited with error or was cancelled${NC}"
            echo "üìã Distill report preserved at ./distill-report.md"
            echo "You can manually edit it and run:"
            echo -e "${BLUE}   mim distill refine${NC}"
            exit 1
          fi
        else
          # Non-interactive mode: preserve old behavior
          echo "üìù Edit ./distill-report.md to add your decisions, then run:"
          echo -e "${BLUE}   mim distill refine${NC}"
        fi
      else
        echo -e "${GREEN}‚úÖ No manual review required - all issues were auto-fixed${NC}"
        echo ""
        
        if [ "$interactive" = true ]; then
          # In interactive mode, automatically proceed to refine to commit changes
          echo "üéØ Applying auto-fixes..."
          run_distill_refine
        else
          # Non-interactive mode: preserve old behavior
          echo "üìù Changes have been made but NOT committed."
          echo "Run 'mim distill refine' to commit the changes."
        fi
      fi
    fi
  else
    echo ""
    echo -e "${RED}üíÄ Distillation failed! Check the output above for errors.${NC}"
    exit 1
  fi
}

run_distill_refine() {
  echo "üéØ Running mim distill refine..."
  
  if [ ! -f "./distill-report.md" ]; then
    echo -e "${RED}‚ùå Error: No distill report found at ./distill-report.md${NC}"
    echo "Run 'mim distill' first to generate a report."
    exit 1
  fi

  # Check if report has review items that need user input
  has_review_items=false
  if grep -q "## Requires Review" "./distill-report.md" && [ "$(grep -A 10 "## Requires Review" "./distill-report.md" | wc -l)" -gt 2 ]; then
    has_review_items=true
  fi

  # If there are review items, check for user input
  if [ "$has_review_items" = true ]; then
    # Check if report has user input
    if ! grep -q "<!-- USER INPUT START -->" "./distill-report.md"; then
      echo -e "${YELLOW}‚ö†Ô∏è  No user input found in distill-report.md${NC}"
      echo "Please edit distill-report.md and add your decisions between the USER INPUT tags."
      exit 1
    fi
    
    # Check if user actually added content between the tags
    user_content=$(awk '/<!-- USER INPUT START -->/{flag=1;next}/<!-- USER INPUT END -->/{flag=0}flag' "./distill-report.md" | grep -v '^[[:space:]]*$' | grep -v '<!-- Add your decision/instructions here -->')
    if [ -z "$user_content" ]; then
      echo -e "${YELLOW}‚ö†Ô∏è  No user decisions found between USER INPUT tags${NC}"
      echo "Please edit distill-report.md and add your decisions between:"
      echo "  <!-- USER INPUT START -->"
      echo "  [Your decisions here]"
      echo "  <!-- USER INPUT END -->"
      exit 1
    fi
  else
    echo "‚ÑπÔ∏è  No review items found - only auto-fixes to commit"
  fi

  echo "üîç Processing user-guided refinements from distill report..."
  echo ""
  echo "   [Applying your decisions to documentation]"
  echo ""

  # Get the distill_refine prompt from JSON
  local prompt=$(get_prompt "distill_refine" 0)
  if [ -z "$prompt" ] || [ "$prompt" = "null" ]; then
    echo -e "${RED}‚ùå Error: Could not load distill_refine prompt${NC}"
    exit 1
  fi

  claude \
    --verbose \
    --allowedTools "$ALLOWED_TOOLS" \
    --append-system-prompt "You are Mim's refinement aspect, completing the distillation process. The report is at ./distill-report.md (repository root). If there are items with user guidance between <!-- USER INPUT START --> and <!-- USER INPUT END --> tags, apply those decisions. If there are only auto-fixes and no review items, simply delete the report to mark completion. Remember that knowledge files are in .claude/knowledge/ and include various topic files plus the special KNOWLEDGE_MAP.md and KNOWLEDGE_MAP_CLAUDE.md files." \
    --print --output-format stream-json "$prompt" | stream_claude_output

  if [ $? -eq 0 ]; then
    echo ""
    echo "‚ú® Refinement complete!"
    
    # Check if distill-report.md was deleted (indicates successful completion)
    if [ ! -f "./distill-report.md" ]; then
      echo -e "${GREEN}‚úÖ Distill report cleaned up after successful refinement${NC}"
    fi
    
    echo ""
    echo "üìú Committing refined documentation..."
    git add .
    git commit -m "üéØ Apply user-guided documentation refinements"
    echo ""
    echo -e "${GREEN}üî• All refinements applied successfully!${NC}"
  else
    echo ""
    echo -e "${RED}üíÄ Refinement failed! Check the output above for errors.${NC}"
    exit 1
  fi
}

# Main command dispatcher
case "$1" in
  "coalesce")
    shift
    run_coalesce "$@"
    ;;
  "distill")
    if [ "$2" = "refine" ]; then
      # Hidden alias for backward compatibility - routes to --refine-only
      shift 2
      run_distill --refine-only "$@"
    else
      shift
      run_distill "$@"
    fi
    ;;
  "help"|"--help"|"-h"|"")
    show_help
    ;;
  *)
    echo -e "${RED}‚ùå Unknown command: $1${NC}"
    echo ""
    show_help
    exit 1
    ;;
esac
